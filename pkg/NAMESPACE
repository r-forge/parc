useDynLib("paRc")

export(## OpenMP function wrappers
       "omp_get_num_procs",
       "omp_set_num_threads",
       "omp_get_max_threads",

       ## Application: Matrix Multiplication 
       "serial_matrix_multiplication",
       "matrix_multiplication_BLAS",
       "omp_matrix_multiplication",
       "omp_matrix_multiplication_BLAS",
       
       "serial_dot_product",

       ## benchmarking
       "benchmark_task",
       "benchmark_task<-",
       "benchmark_tasks",
       "benchmark_type",
       "benchmark_type<-",
       "benchmark_types",
       "benchmark_function_to_apply",
       "benchmark_is_parallel",
       "benchmark_cpu_range",
       "benchmark_cpu_range<-",
       "benchmark_data",
       "benchmark_data<-",
       "benchmark_data.frame",
       "create_benchmark",
       "run_benchmark",
       "speedup",

       ## Application: option pricing
       "define_option",
       "payoff",
       "maturity",
       "strike_price",
       "underlying",
       "option_type",
       "option_class",
       "price_of",
       "price_path",
       "position",
       "maturity<-",
       "strike_price<-",
       "underlying<-",
       "option_type<-",
       "option_class<-",
       "price_of<-",
       "price_path<-",
       "position<-",
       "Monte_Carlo_simulation",
       "as.option",
       "Wiener_path",
       "returns",
       "Black_Scholes_price",
       "mcs.Rmpi"
       )

## S3methods
## benchmarking
S3method("print", "benchmark")
S3method("plot", "benchmark_results")
S3method("speedup", "default")
S3method("speedup", "numeric")
S3method("speedup", "benchmark_results")

## option pricing
S3method("as.option","default")
S3method("as.option","list")
S3method("as.list","option")
S3method("print","option")
S3method("plot","option")

## coercions
##S3method(as., )
